generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id        String   @id @default(cuid())
  userId    Int // Relasi ke tabel User
  createdAt DateTime @default(now()) // Waktu pembuatan akun
  updatedAt DateTime @updatedAt // Waktu terakhir diperbarui

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id          Int         @id @default(autoincrement())
  name        String
  email       String      @unique
  password    String
  role        String      @default("user")
  phoneNumber String?
  address     String?
  age         Int?
  point       Int         @default(0)
  gender      String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  Penukaran   Penukaran[]
  Pelaporan   Pelaporan[]
  Payment     Payment[]
  accounts    Account[] 
}

model Toko {
  id       String    @id @default(uuid()) @map("_id")
  nama     String
  alamat   String
  imageUrl String
  barang   Barang[]  @relation("Toko")
  Payment  Payment[]
}

model Barang {
  id       String    @id @default(uuid()) @map("_id")
  nama     String
  harga    Int
  stok     Int
  imageUrl String
  toko     Toko      @relation("Toko", fields: [tokoId], references: [id])
  tokoId   String
  Payment  Payment[]
}

model BankSampah {
  id        String      @id @default(uuid()) @map("_id")
  name      String
  location  String
  sampah    Sampah[]
  Penukaran Penukaran[]
}

model Sampah {
  id           String      @id @default(uuid()) @map("_id")
  category     String
  price        Int
  bankSampahId String
  bankSampah   BankSampah  @relation(fields: [bankSampahId], references: [id])
  Penukaran    Penukaran[]
}

model Penukaran {
  id           String     @id @default(uuid())
  name         User       @relation(fields: [userId], references: [id])
  userId       Int
  category     Sampah     @relation(fields: [sampahId], references: [id])
  sampahId     String
  bankSampah   BankSampah @relation(fields: [bankSampahId], references: [id])
  bankSampahId String
  amount       Int
  earned       Int
  status       String     @default("pending") // ["pending", "success", "cancelled"]
  dateCreated  DateTime   @default(now())
  dateUpdated  DateTime   @updatedAt
}

model Pelaporan {
  id          String   @id @default(uuid()) @map("_id")
  name        User     @relation(fields: [userId], references: [id])
  userId      Int
  judul       String
  address     String
  description String
  status      String   @default("sent") // ["sent", "reviewed", "completed", "rejected"]
  imageUrl    String
  dateCreated DateTime @default(now())
  dateUpdated DateTime @updatedAt
}

model Payment {
  id         String   @id @default(uuid()) @map("_id")
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  toko       Toko     @relation(fields: [tokoId], references: [id])
  tokoId     String
  barang     Barang   @relation(fields: [barangId], references: [id])
  barangId   String
  totalPrice Int
  pointsUsed Int      @default(0)
  status     String   @default("pending") // ["pending", "success", "failed"]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
